// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: data/data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Data_SaveUser_FullMethodName        = "/data.Data/SaveUser"
	Data_SaveProduct_FullMethodName     = "/data.Data/SaveProduct"
	Data_SaveFullPayload_FullMethodName = "/data.Data/SaveFullPayload"
	Data_GetAllData_FullMethodName      = "/data.Data/GetAllData"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	SaveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*SaveResponse, error)
	SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*SaveResponse, error)
	SaveFullPayload(ctx context.Context, in *FullPayload, opts ...grpc.CallOption) (*SaveResponse, error)
	GetAllData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullPayloadList, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) SaveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, Data_SaveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, Data_SaveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) SaveFullPayload(ctx context.Context, in *FullPayload, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, Data_SaveFullPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAllData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullPayloadList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullPayloadList)
	err := c.cc.Invoke(ctx, Data_GetAllData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility.
type DataServer interface {
	SaveUser(context.Context, *User) (*SaveResponse, error)
	SaveProduct(context.Context, *Product) (*SaveResponse, error)
	SaveFullPayload(context.Context, *FullPayload) (*SaveResponse, error)
	GetAllData(context.Context, *Empty) (*FullPayloadList, error)
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServer struct{}

func (UnimplementedDataServer) SaveUser(context.Context, *User) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedDataServer) SaveProduct(context.Context, *Product) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (UnimplementedDataServer) SaveFullPayload(context.Context, *FullPayload) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFullPayload not implemented")
}
func (UnimplementedDataServer) GetAllData(context.Context, *Empty) (*FullPayloadList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}
func (UnimplementedDataServer) testEmbeddedByValue()              {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	// If the following call pancis, it indicates UnimplementedDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SaveUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_SaveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SaveProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_SaveFullPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).SaveFullPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_SaveFullPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).SaveFullPayload(ctx, req.(*FullPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAllData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAllData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUser",
			Handler:    _Data_SaveUser_Handler,
		},
		{
			MethodName: "SaveProduct",
			Handler:    _Data_SaveProduct_Handler,
		},
		{
			MethodName: "SaveFullPayload",
			Handler:    _Data_SaveFullPayload_Handler,
		},
		{
			MethodName: "GetAllData",
			Handler:    _Data_GetAllData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/data.proto",
}
